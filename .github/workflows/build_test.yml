name: test making binaries

on:
  push:
    tags:
    - 'v__*'

jobs:
  build:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      CC: /usr/local/opt/llvm/bin/clang
      CXX: /usr/local/opt/llvm/bin/clang++
      CIBW_BUILD: cp3[678]*
      CIBW_SKIP: cp31*
    environment: TEST_PYPI_API_TOKEN
    strategy:
      matrix:
        # os: [ubuntu-latest, macos-latest, windows-latest]
        # python-version: ['3.8']
        os: [macos-latest]
        python-version: ['3.8']
    steps:
    - uses: actions/checkout@v2

    - uses: actions/setup-python@v2
      with:
          python-version: '3.8'
    
    - name: Install cibuildwheel
      run: python -m pip install cibuildwheel

    - name: Build wheels (ubuntu-latest)        
      if: matrix.os == 'ubuntu-latest'
      run: python -m cibuildwheel --output-dir dist

    - name: Build wheels (macos-latest)
      if: matrix.os == 'macos-latest'
      run: |
        python --version
        brew install llvm
        export LIBRARY_PATH="/usr/local/opt/llvm/lib"
        python -m cibuildwheel --output-dir dist

    - name: Build wheels (windows-latest)      
      if: matrix.os == 'windows-latest'
      run: python -m cibuildwheel --output-dir dist
      
    - name: Install twine
      run: python -m pip install twine

    - name: Upload to TestPyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        TWINE_REPOSITORY: testpypi
        skip_existing: true
      run: python -m twine upload --skip-existing dist/*        
      
    - uses: actions/upload-artifact@v2
      with:
        path: |
          ./docs/_build/
  
  update_docs:
    name: Updating docs
      runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.8']    
    steps:

    - uses: actions/checkout@v2

    - uses: actions/setup-python@v2
      with:
          python-version: ${{ matrix.python-version }}
    
    - name: installing
      run: |
        python setup.py install
        python setup.py build_ext --inplace
        pip uninstall snipar

    - name: make the docs
      run: |
            pip install sphinx
            pip install sphinx_rtd_theme
            cd docs
            sphinx-apidoc -o . ../snipar/
            make html
    
    - uses: actions/upload-artifact@v2
      with:
        path: ./docs/_build/
#######
  # test:    
  #   name: testing on ${{ matrix.os }} and ${{ matrix.python-version }}
  #   needs: build
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       # os: [ubuntu-latest, macos-latest, windows-latest]
  #       # python-version: ['3.6', '3.7.1', '3.8']
  #       os: [macos-latest]
  #       python-version: ['3.8']
    # steps:
    # - uses: actions/download-artifact@v2
    #   with:
    #     path: ./dist/

    # - uses: actions/setup-python@v2
    #   with:
    #       python-version: ${{ matrix.python-version }}

    # - name: installing
    #   run: |
    #         ls dist
    #         ls dist/artifact
    #         pip install --upgrade pip
    #         pip install wheel
    #         pip install --no-index --find-links=dist/artifact snipar
    
    # - name: testing
    #   run: python -m unittest snipar.tesets